wb = xlsx_package.workbook

@products.each do |product|
  wb.add_worksheet(name: product) do |sheet|
    if product == "合計"
      sheet.add_row [ "拠点", "Ave", "現状実売","固定費", "終着実売", "dメル一次成果現状実売", "dメル一次成果終着実売"]
      @progress_bases.each do |base|
        dmer_date_progress = @dmer_date_progresses.where(base: base)
        cash_date_progress = @cash_date_progresses.where(base: base)
        fixed_sales_base = @fixed_sales.where(base: base).sum(:price)
        if (cash_date_progress.sum(:profit_fin) == 0) || (cash_date_progress.sum(:shift_schedule) == 0)
          average = 0
        else  
          average = 
            (
              cash_date_progress.sum(:profit_fin).to_f / cash_date_progress.sum(:shift_schedule)
            ).round()
        end 
         
        sheet.add_row [
          base, average, cash_date_progress.sum(:profit_current), fixed_sales_base ,cash_date_progress.sum(:profit_fin) + fixed_sales_base, 
          dmer_date_progress.sum(:profit_current1),dmer_date_progress.sum(:profit_fin1)
        ]
      end 
        sum_average = (@cash_date_progresses.where("base LIKE ?", "%SS%").sum(:profit_fin) / @cash_date_progresses.where("base LIKE ?", "%SS%").sum(:shift_schedule)).round()
        sheet.add_row [
          "全拠点", sum_average, @cash_date_progresses.sum(:profit_current),@fixed_sales.sum(:price),@cash_date_progresses.sum(:profit_fin) + @fixed_sales.sum(:price),
          @dmer_date_progresses.sum(:profit_current1), @dmer_date_progresses.sum(:profit_fin1)
        ]

    elsif product == "dメル"
      sheet.add_row [ "拠点", "ユーザー", "役職", "予定シフト", "消化シフト", "獲得", "獲得Ave", "終着獲得数", "実売Ave", "現状実売", "終着実売" ]
      @progress_bases.each do |base|
          @activity_bases.where(base: base).order(:position,:user_id).each do |activity_user|
          if date_progress = @dmer_date_progresses.find_by(user_id: activity_user.user_id).present?
            date_progress = @dmer_date_progresses.find_by(user_id: activity_user.user_id)
            val_len = date_progress.get_len - date_progress.def_len
            fin_len = date_progress.fin_len
            shift_schedule = date_progress.shift_schedule.to_i + date_progress.shift_schedule_slmt.to_i
            shift_digestion = date_progress.shift_digestion.to_i + date_progress.shift_digestion_slmt.to_i
            profit_current = date_progress.profit_current
            profit_fin = date_progress.profit_fin1 + date_progress.profit_fin2 + date_progress.profit_fin3
            if (date_progress.fin_len == 0) || (date_progress.shift_schedule == 0)
              ave_len = 0
              ave_profit = 0
            else
              ave_len = (date_progress.fin_len.to_f / date_progress.shift_schedule).round(1) rescue 0
              ave_profit = (profit_fin.to_f / shift_schedule).round() rescue 0
            end 
          else 
            shift_schedule = 0
            shift_digestion = 0
            val_len = 0
            ave_len = 0
            fin_len = 0
            ave_profit = 0
            profit_current = 0
            profit_fin = 0
          end 
          sheet.add_row [
            activity_user.base, activity_user.user.name, activity_user.position,  
            shift_schedule, shift_digestion,
            val_len, ave_len,fin_len,
            ave_profit, profit_current, profit_fin

          ]
        end 
      end

    elsif product == "dメル専売"
      sheet.add_row [ "拠点", "ユーザー", "役職", "予定シフト", "消化シフト", "獲得", "獲得Ave", "終着獲得数", "実売Ave", "現状実売", "終着実売" ]
      @progress_bases.each do |base|
          @activity_bases.where(base: base).order(:position,:user_id).each do |activity_user|
          if @dmer_senbai_date_progresses.find_by(user_id: activity_user.user_id).present?
            date_progress = @dmer_senbai_date_progresses.find_by(user_id: activity_user.user_id)
            val_len = date_progress.get_len
            fin_len = (date_progress.get_len.to_f / date_progress.shift_digestion * date_progress.shift_schedule).round() rescue 0
            shift_schedule = date_progress.shift_schedule.to_i + date_progress.shift_schedule_slmt.to_i
            shift_digestion = date_progress.shift_digestion.to_i + date_progress.shift_digestion_slmt.to_i
            profit_current = date_progress.profit_current
            profit_fin = date_progress.profit_fin
            if (fin_len == 0) || (date_progress.shift_schedule == 0)
              ave_len = 0
              ave_profit = 0
            else
              ave_len = (fin_len.to_f / date_progress.shift_schedule).round(1) rescue 0
              ave_profit = (profit_fin.to_f / shift_schedule).round() rescue 0
            end 
          else
            results = 
              Result.where(date: @start_date..@end_date)
              .where(date: ...Date.today)
              .where(shift: "キャッシュレス新規").where(user_id: activity_user.user_id).length
            results_slmt = 
              Result.where(date: @start_date..@end_date)
              .where(date: ...Date.today)
              .where(shift: "キャッシュレス決済").where(user_id: activity_user.user_id).length
            shifts = 
              Shift.where(start_time: @start_date..@end_date).where(shift: "キャッシュレス新規").where(user_id: activity_user.user_id).length
            shifts_slmt = 
              Shift.where(start_time: @start_date..@end_date).where(shift: "キャッシュレス決済").where(user_id: activity_user.user_id).length
            shift_schedule = shifts + shifts_slmt
            shift_digestion = results + results_slmt
            val_len = 0
            ave_len = 0
            fin_len = 0
            ave_profit = 0
            profit_current = 0
            profit_fin = 0
          end 
          sheet.add_row [
            activity_user.base, activity_user.user.name, activity_user.position, 
            shift_schedule, shift_digestion,
            val_len, ave_len,fin_len,
            ave_profit, profit_current, profit_fin

          ]
        end 
      end

    elsif product == "auPay"
      sheet.add_row [ "拠点", "ユーザー", "役職", "予定シフト", "消化シフト", "獲得", "獲得Ave", "終着獲得数", "実売Ave", "現状実売", "終着実売" ]
      @progress_bases.each do |base|
        @activity_bases.where(base: base).order(:position,:user_id).each do |activity_user|
        if @aupay_date_progresses.find_by(user_id: activity_user.user_id).present?
          date_progress = @aupay_date_progresses.find_by(user_id: activity_user.user_id)
          val_len = date_progress.get_len - date_progress.def_len
          shift_schedule = date_progress.shift_schedule
          shift_digestion = date_progress.shift_digestion
          fin_len = date_progress.fin_len
          profit_current = date_progress.profit_current
          profit_fin = date_progress.profit_fin
          if (date_progress.fin_len == 0) || (date_progress.shift_schedule == 0)
            ave_len = 0
            ave_profit = 0
          else
            ave_len = (date_progress.fin_len.to_f / date_progress.shift_schedule).round(1) rescue 0
            ave_profit = (date_progress.profit_fin.to_f / date_progress.shift_schedule).round() rescue 0
          end 
        else 
            shift_schedule = 0
            shift_digestion = 0
            val_len = 0
            ave_len = 0
            fin_len = 0
            ave_profit = 0
            profit_current = 0
            profit_fin = 0
        end 

          sheet.add_row [
            activity_user.base, activity_user.user.name, activity_user.position, 
            shift_schedule, shift_digestion,
            val_len, ave_len,fin_len,
            ave_profit, profit_current, profit_fin

          ]
        end 
      end

    elsif product == "PayPay"
      sheet.add_row [ "拠点", "ユーザー", "役職", "予定シフト", "消化シフト", "獲得", "獲得Ave", "終着獲得数", "実売Ave", "現状実売", "終着実売" ]
      @progress_bases.each do |base|
        @activity_bases.where(base: base).order(:position,:user_id).each do |activity_user|
        if @paypay_date_progresses.find_by(user_id: activity_user.user_id).present?
          date_progress = @paypay_date_progresses.find_by(user_id: activity_user.user_id)
          shift_schedule = date_progress.shift_schedule
          shift_digestion = date_progress.shift_digestion
          get_len = date_progress.get_len
          fin_len = date_progress.fin_len
          profit_fin = date_progress.profit_fin
          profit_current = date_progress.profit_current
          if (date_progress.fin_len == 0) || (date_progress.shift_schedule == 0)
            ave_len = 0
            ave_profit = 0
          else
            ave_len = (date_progress.fin_len.to_f / date_progress.shift_schedule).round(1) rescue 0
            ave_profit = (date_progress.profit_fin.to_f / date_progress.shift_schedule).round() rescue 0
          end 
        else 
            shift_schedule = 0
            shift_digestion = 0
            get_len = 0
            ave_len = 0
            fin_len = 0
            ave_profit = 0
            profit_current = 0
            profit_fin = 0
        end
          sheet.add_row [
            activity_user.base, activity_user.user.name, activity_user.position, 
            shift_schedule, shift_digestion,
            get_len, ave_len,fin_len,
            ave_profit, profit_current, profit_fin

          ]
        end 
      end
      
    elsif product == "楽天ペイ"
      sheet.add_row [ "拠点", "ユーザー", "役職", "予定シフト", "消化シフト", "獲得", "獲得Ave", "終着獲得数", "実売Ave", "現状実売", "終着実売" ]
      @progress_bases.each do |base|
        @activity_bases.where(base: base).order(:position,:user_id).each do |activity_user|
          if @rakuten_pay_date_progresses.find_by(user_id: activity_user.user_id).present?
            date_progress = @rakuten_pay_date_progresses.find_by(user_id: activity_user.user_id)
            shift_schedule = date_progress.shift_schedule
            shift_digestion = date_progress.shift_digestion
            get_len = date_progress.get_len
            fin_len = date_progress.fin_len
            profit_current = date_progress.profit_current rescue 0
            profit_fin = date_progress.profit_fin
            if (date_progress.fin_len == 0) || (date_progress.shift_schedule == 0)
              ave_len = 0
              ave_profit = 0
            else
            ave_len = (date_progress.fin_len.to_f / date_progress.shift_schedule).round(1) rescue 0
            ave_profit = (date_progress.profit_fin.to_f / date_progress.shift_schedule).round() rescue 0
          end 
        else  
          shift_schedule = 0
          shift_digestion = 0
          get_len = 0
          ave_len = 0
          fin_len = 0
          ave_profit = 0
          profit_current = 0
          profit_fin = 0
        end 

          sheet.add_row [
            activity_user.base, activity_user.user.name, activity_user.position, 
            shift_schedule, shift_digestion,
            get_len, ave_len,fin_len,
            ave_profit, profit_current, profit_fin
          ]
        end 
      end

    elsif product == "AirPay"
      sheet.add_row [ "拠点", "ユーザー", "役職", "予定シフト", "消化シフト", "獲得", "獲得Ave", "終着獲得数", "実売Ave", "現状実売", "終着実売" ]
      @progress_bases.each do |base|
        @activity_bases.where(base: base).order(:position,:user_id).each do |activity_user|
          if @airpay_date_progresses.find_by(user_id: activity_user.user_id).present?
            date_progress = @airpay_date_progresses.find_by(user_id: activity_user.user_id)
            shift_schedule = date_progress.shift_schedule rescue 0
            shift_digestion = date_progress.shift_digestion rescue 0
            get_len = date_progress.get_len rescue 0
            fin_len = date_progress.fin_len rescue 0
            profit_current = date_progress.profit_current rescue 0
            profit_fin = date_progress.profit_fin rescue 0
            if (date_progress.fin_len == 0) || (date_progress.shift_schedule == 0)
              ave_len = 0
              ave_profit = 0
            else
              ave_len = (date_progress.fin_len.to_f / date_progress.shift_schedule).round(1) rescue 0
              ave_profit = (date_progress.profit_fin.to_f / date_progress.shift_schedule).round() rescue 0
            end 
          else
          shift_schedule = 0
          shift_digestion = 0
          get_len = 0
          ave_len = 0
          fin_len = 0
          ave_profit = 0
          profit_current = 0
          profit_fin = 0
          end

          sheet.add_row [
            activity_user.base, activity_user.user.name, activity_user.position, 
            shift_schedule, shift_digestion,
            get_len, ave_len,fin_len,
            ave_profit, profit_current, profit_fin
          ]
        end 
      end
    elsif product == "その他商材"
      @other_products.group(:product_name).each do |product|
        sheet.add_row [ "商材","拠点", "ユーザー", "役職", "獲得", "現状実売"]
        @progress_bases.each do |base|
          @activity_bases.where(base: base).order(:position,:user_id).each do |activity_user|
            if @other_product_date_progresses.find_by(product_name: product.product_name,user_id: activity_user.user_id).present?
              date_progress = @other_product_date_progresses.find_by(product_name: product.product_name,user_id: activity_user.user_id)
              result_len = date_progress.result_len rescue 0
              profit_current = date_progress.profit_current rescue 0
            else  
              result_len = 0
              profit_current = 0
            end
            sheet.add_row [
              product.product_name,activity_user.base, activity_user.user.name, activity_user.position, 
              result_len,profit_current
            ]
          end 
        end
      end 
    elsif product == "UsenPay"
      sheet.add_row [ "拠点", "ユーザー", "役職", "獲得", "獲得Ave","終着獲得", "現状実売", "終着実売"]
      @progress_bases.each do |base|
        @activity_bases.where(base: base).order(:position,:user_id).each do |activity_user|
          if @usen_pay_date_progresses.find_by(user_id: activity_user.user_id).present?
            date_progress = @usen_pay_date_progresses.find_by(user_id: activity_user.user_id)
            get_len = date_progress.get_len
            fin_len = date_progress.fin_len
            ave_len = (get_len.to_f / date_progress.shift_digestion).round(1) rescue 0
            profit_current = date_progress.profit_current
            profit_fin = date_progress.profit_fin
          else 
            get_len = 0
            fin_len = 0
            ave_len = 0
            profit_current = 0
            profit_fin = 0
          end 
          sheet.add_row [
            activity_user.base, activity_user.user.name, activity_user.position, 
            get_len,ave_len,fin_len,profit_current,profit_fin
          ]
        end
      end
    elsif product == "固定費"
      fixed_array = ["拠点"]
      @fixed_sales.group(:name).each do |fixed_sale|
        fixed_array << fixed_sale.name
      end 
      sheet.add_row fixed_array
      @progress_bases.each do |base|
          fixed_sheet_array = [base]
          @fixed_sales.group(:name).each do |fixed_sale|
            fixed_price = @fixed_sales.where(name: fixed_sale.name).where(base: base).sum(:price)
            fixed_sheet_array << fixed_price
          end 
          sheet.add_row fixed_sheet_array
      end
    elsif product == "会議用まとめ"
      sheet.add_row [
        "拠点", "ユーザー", "役職", 
        "dメル獲得Ave", "dメル獲得終着", "dメル現状売上","dメル終着売上",
        "dメル専売獲得Ave", "dメル専売獲得終着", "dメル専売現状売上","dメル専売終着売上",
        "auPay獲得Ave", "auPay獲得終着", "auPay現状売上","auPay終着売上",
        "PayPay獲得Ave", "PayPay獲得終着", "PayPay現状売上","PayPay終着売上",
        "楽天ペイ獲得Ave", "楽天ペイ獲得終着", "楽天ペイ現状売上","楽天ペイ終着売上",
        "AirPay獲得Ave", "AirPay獲得終着", "AirPay現状売上","AirPay終着売上",
        "U-Pay獲得数", "U-Pay獲得Ave", "U-Pay獲得終着","U-Pay現状売上","U-Pay終着売上"
      ]
      @progress_bases.each do |base|
        @activity_bases.where(base: base).order(:position,:user_id).each do |date_progress|
          dmer_user_progress = @dmer_date_progresses.where(base: base).where(user_id: date_progress.user_id).first
          dmer_senbai_user_progress = @dmer_senbai_date_progresses.where(base: base).where(user_id: date_progress.user_id).first
          aupay_user_progress = @aupay_date_progresses.where(base: base).where(user_id: date_progress.user_id).first
          paypay_user_progress = @paypay_date_progresses.where(base: base).where(user_id: date_progress.user_id).first
          rakuten_pay_user_progress = @rakuten_pay_date_progresses.where(base: base).where(user_id: date_progress.user_id).first
          airpay_user_progress = @airpay_date_progresses.where(base: base).where(user_id: date_progress.user_id).first
          airpaysticker_user_progress = @airpaysticker_date_progresses.where(base: base).where(user_id: date_progress.user_id).first
          usen_pay_user_progress = @usen_pay_date_progresses.where(base: base).where(user_id: date_progress.user_id).first

          dmer_shift_schedule = dmer_user_progress.shift_schedule.to_i + dmer_user_progress.shift_schedule_slmt.to_i rescue 0
          dmer_shift_digestion = dmer_user_progress.shift_digestion.to_i + dmer_user_progress.shift_digestion_slmt.to_i rescue 0
          
          if (dmer_user_progress.nil?) || (dmer_user_progress.fin_len == 0) || (dmer_user_progress.shift_schedule == 0)
            dmer_ave_len = 0
          else
            dmer_ave_len = (dmer_user_progress.fin_len.to_f / dmer_user_progress.shift_schedule).round(1) rescue 0
          end 
            dmer_fin_len = dmer_user_progress.fin_len rescue 0
            dmer_profit_current = dmer_user_progress.profit_current  rescue 0
            dmer_profit_fin = dmer_user_progress.profit_fin1 + dmer_user_progress.profit_fin2 + dmer_user_progress.profit_fin3 rescue 0
          
          if (dmer_senbai_user_progress.nil?) || (dmer_senbai_user_progress.fin_len == 0) || (dmer_senbai_user_progress.shift_schedule == 0)
            dmer_senbai_ave_len = 0
          else
            dmer_senbai_ave_len = (dmer_senbai_user_progress.fin_len.to_f / dmer_senbai_user_progress.shift_schedule).round(1) rescue 0
          end 
            dmer_senbai_fin_len = dmer_senbai_user_progress.fin_len rescue 0
            dmer_senbai_profit_current = dmer_senbai_user_progress.profit_current  rescue 0
            dmer_senbai_profit_fin = dmer_senbai_user_progress.profit_fin1 + dmer_senbai_user_progress.profit_fin2 + dmer_senbai_user_progress.profit_fin3 rescue 0

          if (aupay_user_progress.nil?) || (aupay_user_progress.fin_len == 0) || (aupay_user_progress.shift_schedule == 0)
            aupay_ave_len = 0
          else
            aupay_ave_len = (aupay_user_progress.fin_len.to_f / aupay_user_progress.shift_schedule).round(1) rescue 0
          end 
            aupay_fin_len = aupay_user_progress.fin_len rescue 0
            aupay_profit_current = aupay_user_progress.profit_current rescue 0
            aupay_profit_fin = aupay_user_progress.profit_fin rescue 0

          if (paypay_user_progress.nil?) || (paypay_user_progress.fin_len == 0) || (paypay_user_progress.shift_schedule == 0)
            paypay_ave_len = 0
          else
            paypay_ave_len = (paypay_user_progress.fin_len.to_f / paypay_user_progress.shift_schedule).round(1) rescue 0
          end 
            paypay_fin_len = paypay_user_progress.fin_len rescue 0
            paypay_profit_current = paypay_user_progress.profit_current rescue 0
            paypay_profit_fin = paypay_user_progress.profit_fin rescue 0

          if (rakuten_pay_user_progress.nil?) || (rakuten_pay_user_progress.fin_len == 0) || (rakuten_pay_user_progress.shift_schedule == 0)
            rakuten_pay_ave_len = 0
          else
            rakuten_pay_ave_len = (rakuten_pay_user_progress.fin_len.to_f / rakuten_pay_user_progress.shift_schedule).round(1) rescue 0
          end 
            rakuten_pay_fin_len = rakuten_pay_user_progress.fin_len rescue 0
            rakuten_pay_profit_current = rakuten_pay_user_progress.profit_current rescue 0
            rakuten_pay_profit_fin = rakuten_pay_user_progress.profit_fin rescue 0

          if (airpay_user_progress.nil?) || (airpay_user_progress.fin_len == 0) || (airpay_user_progress.shift_schedule == 0)
            airpay_ave_len = 0
          else
            airpay_ave_len = (airpay_user_progress.fin_len.to_f / airpay_user_progress.shift_schedule).round(1) rescue 0
          end 
            airpay_fin_len = airpay_user_progress.fin_len rescue 0
            airpay_profit_current = airpay_user_progress.profit_current rescue 0
            airpay_profit_fin = airpay_user_progress.profit_fin rescue 0
          airpay_ac_profit = airpaysticker_user_progress.profit_current rescue 0
          airpay_ac_result_len = (airpay_ac_profit / 10000).to_i rescue 0

          if (usen_pay_user_progress.nil?) || (usen_pay_user_progress.get_len == 0) || (usen_pay_user_progress.shift_digestion == 0)
            usen_ave_len =  0
          else
            usen_ave_len = (usen_pay_user_progress.get_len.to_f / usen_pay_user_progress.shift_digestion).round(1) rescue 0
          end 
            usen_fin_len = usen_pay_user_progress.fin_len rescue 0
            usen_get_len = usen_pay_user_progress.get_len rescue 0
            usen_profit_current = usen_pay_user_progress.profit_current rescue 0
            usen_profit_fin = usen_pay_user_progress.profit_fin rescue 0

          sheet.add_row [
            date_progress.base, date_progress.user.name, date_progress.position, 
            dmer_ave_len,dmer_fin_len, dmer_profit_current, dmer_profit_fin,
            dmer_senbai_ave_len,dmer_senbai_fin_len, dmer_senbai_profit_current, dmer_senbai_profit_fin,
            aupay_ave_len,aupay_fin_len, aupay_profit_current, aupay_profit_fin,
            paypay_ave_len,paypay_fin_len, paypay_profit_current, paypay_profit_fin,
            rakuten_pay_ave_len,rakuten_pay_fin_len, rakuten_pay_profit_current, rakuten_pay_profit_fin,
            airpay_ave_len,airpay_fin_len, airpay_profit_current, airpay_profit_fin,
            usen_get_len, usen_ave_len,usen_fin_len,usen_profit_current, usen_profit_fin
            
          ]
        end
      end
    end 
  end
end